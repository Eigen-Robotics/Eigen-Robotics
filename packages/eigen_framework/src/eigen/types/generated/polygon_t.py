"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import eigen.types.generated

class polygon_t(object):

    __slots__ = ["points_len", "points"]

    __typenames__ = ["int64_t", "eigen.types.generated.point32_t"]

    __dimensions__ = [None, ["points_len"]]

    def __init__(self):
        self.points_len = 0
        """ LCM Type: int64_t """
        self.points = []
        """ LCM Type: eigen.types.generated.point32_t[points_len] """

    def encode(self):
        buf = BytesIO()
        buf.write(polygon_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.points_len))
        for i0 in range(self.points_len):
            assert self.points[i0]._get_packed_fingerprint() == eigen.types.generated.point32_t._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != polygon_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return polygon_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = polygon_t()
        self.points_len = struct.unpack(">q", buf.read(8))[0]
        self.points = []
        for i0 in range(self.points_len):
            self.points.append(eigen.types.generated.point32_t._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if polygon_t in parents: return 0
        newparents = parents + [polygon_t]
        tmphash = (0x1ed5255ecca8d29d+ eigen.types.generated.point32_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if polygon_t._packed_fingerprint is None:
            polygon_t._packed_fingerprint = struct.pack(">Q", polygon_t._get_hash_recursive([]))
        return polygon_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", polygon_t._get_packed_fingerprint())[0]

