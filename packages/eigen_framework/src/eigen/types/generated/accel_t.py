"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import eigen.types.generated

class accel_t(object):

    __slots__ = ["linear", "angular"]

    __typenames__ = ["eigen.types.generated.vector3_t", "eigen.types.generated.vector3_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.linear = eigen.types.generated.vector3_t()
        """ LCM Type: eigen.types.generated.vector3_t """
        self.angular = eigen.types.generated.vector3_t()
        """
        linear acceleration
        LCM Type: eigen.types.generated.vector3_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(accel_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.linear._get_packed_fingerprint() == eigen.types.generated.vector3_t._get_packed_fingerprint()
        self.linear._encode_one(buf)
        assert self.angular._get_packed_fingerprint() == eigen.types.generated.vector3_t._get_packed_fingerprint()
        self.angular._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != accel_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return accel_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = accel_t()
        self.linear = eigen.types.generated.vector3_t._decode_one(buf)
        self.angular = eigen.types.generated.vector3_t._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if accel_t in parents: return 0
        newparents = parents + [accel_t]
        tmphash = (0x3a4144772922add7+ eigen.types.generated.vector3_t._get_hash_recursive(newparents)+ eigen.types.generated.vector3_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if accel_t._packed_fingerprint is None:
            accel_t._packed_fingerprint = struct.pack(">Q", accel_t._get_hash_recursive([]))
        return accel_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", accel_t._get_packed_fingerprint())[0]

