"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import eigen.types.generated

class inertia_t(object):

    __slots__ = ["m", "com", "ixx", "ixy", "ixz", "iyy", "iyz", "izz"]

    __typenames__ = ["double", "eigen.types.generated.vector3_t", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None]

    def __init__(self):
        self.m = 0.0
        """ LCM Type: double """
        self.com = eigen.types.generated.vector3_t()
        """
        mass
        LCM Type: eigen.types.generated.vector3_t
        """

        self.ixx = 0.0
        """
        center of mass
        LCM Type: double
        """

        self.ixy = 0.0
        """ LCM Type: double """
        self.ixz = 0.0
        """ LCM Type: double """
        self.iyy = 0.0
        """ LCM Type: double """
        self.iyz = 0.0
        """ LCM Type: double """
        self.izz = 0.0
        """ LCM Type: double """

    def encode(self):
        buf = BytesIO()
        buf.write(inertia_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">d", self.m))
        assert self.com._get_packed_fingerprint() == eigen.types.generated.vector3_t._get_packed_fingerprint()
        self.com._encode_one(buf)
        buf.write(struct.pack(">dddddd", self.ixx, self.ixy, self.ixz, self.iyy, self.iyz, self.izz))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != inertia_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return inertia_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = inertia_t()
        self.m = struct.unpack(">d", buf.read(8))[0]
        self.com = eigen.types.generated.vector3_t._decode_one(buf)
        self.ixx, self.ixy, self.ixz, self.iyy, self.iyz, self.izz = struct.unpack(">dddddd", buf.read(48))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if inertia_t in parents: return 0
        newparents = parents + [inertia_t]
        tmphash = (0xbeaa1a2a4c70b2e0+ eigen.types.generated.vector3_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if inertia_t._packed_fingerprint is None:
            inertia_t._packed_fingerprint = struct.pack(">Q", inertia_t._get_hash_recursive([]))
        return inertia_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", inertia_t._get_packed_fingerprint())[0]

