"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import eigen.types.generated

class pose_array_t(object):

    __slots__ = ["header", "poses_len", "poses"]

    __typenames__ = ["eigen.types.generated.header_t", "int64_t", "eigen.types.generated.pose_t"]

    __dimensions__ = [None, None, ["poses_len"]]

    def __init__(self):
        self.header = eigen.types.generated.header_t()
        """ LCM Type: eigen.types.generated.header_t """
        self.poses_len = 0
        """ LCM Type: int64_t """
        self.poses = []
        """ LCM Type: eigen.types.generated.pose_t[poses_len] """

    def encode(self):
        buf = BytesIO()
        buf.write(pose_array_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == eigen.types.generated.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">q", self.poses_len))
        for i0 in range(self.poses_len):
            assert self.poses[i0]._get_packed_fingerprint() == eigen.types.generated.pose_t._get_packed_fingerprint()
            self.poses[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pose_array_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pose_array_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = pose_array_t()
        self.header = eigen.types.generated.header_t._decode_one(buf)
        self.poses_len = struct.unpack(">q", buf.read(8))[0]
        self.poses = []
        for i0 in range(self.poses_len):
            self.poses.append(eigen.types.generated.pose_t._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if pose_array_t in parents: return 0
        newparents = parents + [pose_array_t]
        tmphash = (0xd37bc26b2b1df91+ eigen.types.generated.header_t._get_hash_recursive(newparents)+ eigen.types.generated.pose_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if pose_array_t._packed_fingerprint is None:
            pose_array_t._packed_fingerprint = struct.pack(">Q", pose_array_t._get_hash_recursive([]))
        return pose_array_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", pose_array_t._get_packed_fingerprint())[0]

