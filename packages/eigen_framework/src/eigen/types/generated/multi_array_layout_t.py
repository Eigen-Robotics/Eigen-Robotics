"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import eigen.types.generated

class multi_array_layout_t(object):

    __slots__ = ["dim_len", "dim", "data_offset"]

    __typenames__ = ["int64_t", "eigen.types.generated.multi_array_dimension_t", "int32_t"]

    __dimensions__ = [None, ["dim_len"], None]

    def __init__(self):
        self.dim_len = 0
        """
        ROS: std_msgs/MultiArrayLayout
        LCM Type: int64_t
        """

        self.dim = []
        """
        number of dimensions
        LCM Type: eigen.types.generated.multi_array_dimension_t[dim_len]
        """

        self.data_offset = 0
        """ LCM Type: int32_t """

    def encode(self):
        buf = BytesIO()
        buf.write(multi_array_layout_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.dim_len))
        for i0 in range(self.dim_len):
            assert self.dim[i0]._get_packed_fingerprint() == eigen.types.generated.multi_array_dimension_t._get_packed_fingerprint()
            self.dim[i0]._encode_one(buf)
        buf.write(struct.pack(">i", self.data_offset))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != multi_array_layout_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return multi_array_layout_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = multi_array_layout_t()
        self.dim_len = struct.unpack(">q", buf.read(8))[0]
        self.dim = []
        for i0 in range(self.dim_len):
            self.dim.append(eigen.types.generated.multi_array_dimension_t._decode_one(buf))
        self.data_offset = struct.unpack(">i", buf.read(4))[0]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if multi_array_layout_t in parents: return 0
        newparents = parents + [multi_array_layout_t]
        tmphash = (0xb3dce399d42e93e1+ eigen.types.generated.multi_array_dimension_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if multi_array_layout_t._packed_fingerprint is None:
            multi_array_layout_t._packed_fingerprint = struct.pack(">Q", multi_array_layout_t._get_hash_recursive([]))
        return multi_array_layout_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", multi_array_layout_t._get_packed_fingerprint())[0]

