"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class duration_t(object):

    __slots__ = ["sec", "nanosec"]

    __typenames__ = ["int64_t", "int64_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.sec = 0
        """
        ROS: builtin_interfaces/Duration (sec:int32, nanosec:int32/uint32)
        LCM Type: int64_t
        """

        self.nanosec = 0
        """ LCM Type: int64_t """

    def encode(self):
        buf = BytesIO()
        buf.write(duration_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qq", self.sec, self.nanosec))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != duration_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return duration_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = duration_t()
        self.sec, self.nanosec = struct.unpack(">qq", buf.read(16))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if duration_t in parents: return 0
        tmphash = (0x263f45eaa4a9af63) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if duration_t._packed_fingerprint is None:
            duration_t._packed_fingerprint = struct.pack(">Q", duration_t._get_hash_recursive([]))
        return duration_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", duration_t._get_packed_fingerprint())[0]

