"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import eigen.types.generated

class int32_multi_array_t(object):
    """ Int32MultiArray """

    __slots__ = ["layout", "data_len", "data"]

    __typenames__ = ["eigen.types.generated.multi_array_layout_t", "int64_t", "int32_t"]

    __dimensions__ = [None, None, ["data_len"]]

    def __init__(self):
        self.layout = eigen.types.generated.multi_array_layout_t()
        """ LCM Type: eigen.types.generated.multi_array_layout_t """
        self.data_len = 0
        """ LCM Type: int64_t """
        self.data = []
        """ LCM Type: int32_t[data_len] """

    def encode(self):
        buf = BytesIO()
        buf.write(int32_multi_array_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.layout._get_packed_fingerprint() == eigen.types.generated.multi_array_layout_t._get_packed_fingerprint()
        self.layout._encode_one(buf)
        buf.write(struct.pack(">q", self.data_len))
        buf.write(struct.pack('>%di' % self.data_len, *self.data[:self.data_len]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != int32_multi_array_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return int32_multi_array_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = int32_multi_array_t()
        self.layout = eigen.types.generated.multi_array_layout_t._decode_one(buf)
        self.data_len = struct.unpack(">q", buf.read(8))[0]
        self.data = struct.unpack('>%di' % self.data_len, buf.read(self.data_len * 4))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if int32_multi_array_t in parents: return 0
        newparents = parents + [int32_multi_array_t]
        tmphash = (0xff9058b6d2ac5987+ eigen.types.generated.multi_array_layout_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if int32_multi_array_t._packed_fingerprint is None:
            int32_multi_array_t._packed_fingerprint = struct.pack(">Q", int32_multi_array_t._get_hash_recursive([]))
        return int32_multi_array_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", int32_multi_array_t._get_packed_fingerprint())[0]

