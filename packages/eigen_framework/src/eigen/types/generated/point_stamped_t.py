"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import eigen.types.generated

class point_stamped_t(object):
    """ Convenience stamped primitives frequently used in geometry_msgs: """

    __slots__ = ["header", "point"]

    __typenames__ = ["eigen.types.generated.header_t", "eigen.types.generated.point_t"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.header = eigen.types.generated.header_t()
        """ LCM Type: eigen.types.generated.header_t """
        self.point = eigen.types.generated.point_t()
        """ LCM Type: eigen.types.generated.point_t """

    def encode(self):
        buf = BytesIO()
        buf.write(point_stamped_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == eigen.types.generated.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        assert self.point._get_packed_fingerprint() == eigen.types.generated.point_t._get_packed_fingerprint()
        self.point._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != point_stamped_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return point_stamped_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = point_stamped_t()
        self.header = eigen.types.generated.header_t._decode_one(buf)
        self.point = eigen.types.generated.point_t._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if point_stamped_t in parents: return 0
        newparents = parents + [point_stamped_t]
        tmphash = (0xf012413a2c8028c2+ eigen.types.generated.header_t._get_hash_recursive(newparents)+ eigen.types.generated.point_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if point_stamped_t._packed_fingerprint is None:
            point_stamped_t._packed_fingerprint = struct.pack(">Q", point_stamped_t._get_hash_recursive([]))
        return point_stamped_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", point_stamped_t._get_packed_fingerprint())[0]

